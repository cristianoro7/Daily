package desperado.com.daily.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import desperado.com.daily.data.bean.NewsDetailBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_DETAIL_BEAN".
*/
public class NewsDetailBeanDao extends AbstractDao<NewsDetailBean, Void> {

    public static final String TABLENAME = "NEWS_DETAIL_BEAN";

    /**
     * Properties of entity NewsDetailBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Body = new Property(0, String.class, "body", false, "BODY");
        public final static Property Image_source = new Property(1, String.class, "image_source", false, "IMAGE_SOURCE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property Share_url = new Property(4, String.class, "share_url", false, "SHARE_URL");
        public final static Property Ga_prefix = new Property(5, String.class, "ga_prefix", false, "GA_PREFIX");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
        public final static Property Id = new Property(7, int.class, "id", false, "ID");
    }


    public NewsDetailBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NewsDetailBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_DETAIL_BEAN\" (" + //
                "\"BODY\" TEXT," + // 0: body
                "\"IMAGE_SOURCE\" TEXT," + // 1: image_source
                "\"TITLE\" TEXT," + // 2: title
                "\"IMAGE\" TEXT," + // 3: image
                "\"SHARE_URL\" TEXT," + // 4: share_url
                "\"GA_PREFIX\" TEXT," + // 5: ga_prefix
                "\"TYPE\" INTEGER NOT NULL ," + // 6: type
                "\"ID\" INTEGER NOT NULL );"); // 7: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_DETAIL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsDetailBean entity) {
        stmt.clearBindings();
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(1, body);
        }
 
        String image_source = entity.getImage_source();
        if (image_source != null) {
            stmt.bindString(2, image_source);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(5, share_url);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(6, ga_prefix);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsDetailBean entity) {
        stmt.clearBindings();
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(1, body);
        }
 
        String image_source = entity.getImage_source();
        if (image_source != null) {
            stmt.bindString(2, image_source);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(5, share_url);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(6, ga_prefix);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public NewsDetailBean readEntity(Cursor cursor, int offset) {
        NewsDetailBean entity = new NewsDetailBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // body
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // image_source
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // share_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ga_prefix
            cursor.getInt(offset + 6), // type
            cursor.getInt(offset + 7) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsDetailBean entity, int offset) {
        entity.setBody(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImage_source(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShare_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGa_prefix(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
        entity.setId(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(NewsDetailBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(NewsDetailBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(NewsDetailBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
