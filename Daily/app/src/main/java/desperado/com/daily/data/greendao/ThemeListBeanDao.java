package desperado.com.daily.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import desperado.com.daily.data.bean.ThemeListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THEME_LIST_BEAN".
*/
public class ThemeListBeanDao extends AbstractDao<ThemeListBean, Void> {

    public static final String TABLENAME = "THEME_LIST_BEAN";

    /**
     * Properties of entity ThemeListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Color = new Property(0, int.class, "color", false, "COLOR");
        public final static Property Thumbnail = new Property(1, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Id = new Property(3, int.class, "id", false, "ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
    }


    public ThemeListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ThemeListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THEME_LIST_BEAN\" (" + //
                "\"COLOR\" INTEGER NOT NULL ," + // 0: color
                "\"THUMBNAIL\" TEXT," + // 1: thumbnail
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"ID\" INTEGER NOT NULL ," + // 3: id
                "\"NAME\" TEXT);"); // 4: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THEME_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ThemeListBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getColor());
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(2, thumbnail);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
        stmt.bindLong(4, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ThemeListBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getColor());
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(2, thumbnail);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
        stmt.bindLong(4, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ThemeListBean readEntity(Cursor cursor, int offset) {
        ThemeListBean entity = new ThemeListBean( //
            cursor.getInt(offset + 0), // color
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // thumbnail
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.getInt(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ThemeListBean entity, int offset) {
        entity.setColor(cursor.getInt(offset + 0));
        entity.setThumbnail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ThemeListBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ThemeListBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(ThemeListBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
